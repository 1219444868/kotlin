description = 'Kotlin Full Reflection Library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

configurePublishing(project)

def core = "${rootDir}/core"
def relocatedCoreSrc = "${buildDir}/core-relocated"

configurations {
    proguardDeps
    compileOnly.extendsFrom(shadows)
    mainJar
    combine
}

dependencies {
    proguardDeps project(':kotlin-stdlib')

    combine project(':kotlin-reflect-impl')
    combine project(":kotlin-reflect-api")
}

task combineApiAndImpl(type: Jar, dependsOn: ':kotlin-reflect-api:jar') {
    classifier = "combined"
    from { configurations.combine.collect { zipTree(it) } }
}

task stripMetadata {
    dependsOn combineApiAndImpl
    def inputJar = combineApiAndImpl.outputs.files.first()
    def outputJar = new File("${libsDir}/kotlin-reflect-stripped.jar")
    inputs.file(inputJar)
    outputs.file(outputJar)
    doLast {
        StripMetadataKt.stripMetadata(logger, "kotlin/reflect/jvm/internal/impl/.*", inputJar, outputJar)
    }
}

def mainArchiveName = "${archivesBaseName}-${project.version}.jar"
def outputJarPath = "${libsDir}/${mainArchiveName}"
def rtJar = ['jre/lib/rt.jar', '../Classes/classes.jar'].collect { new File(JDK_16, it) }.find { it.isFile() }

task proguard(type: proguard.gradle.ProGuardTask) {
    dependsOn stripMetadata
    inputs.files(stripMetadata.outputs.files)
    outputs.file(outputJarPath)

    injars stripMetadata.outputs.files
    outjars outputJarPath

    libraryjars configurations.proguardDeps
    libraryjars rtJar

    configuration "${core}/reflection.jvm/reflection.pro"
}


task relocateCoreSources(type: Copy) {
    def commonPackage = "org/jetbrains/kotlin"

    doFirst {
        delete(relocatedCoreSrc)
    }

    from "${core}/descriptors/src/${commonPackage}"
    from "${core}/descriptors.jvm/src/${commonPackage}"
    from "${core}/descriptors.runtime/src/${commonPackage}"
    from "${core}/deserialization/src/${commonPackage}"
    from "${core}/util.runtime/src/${commonPackage}"

    into "${relocatedCoreSrc}/kotlin/reflect/jvm/internal/impl"

    doLast {
        ant.replaceregexp(
                match: 'org\\.jetbrains\\.kotlin',
                replace: 'kotlin.reflect.jvm.internal.impl',
                flags: 'g'
        ) {
            fileset(dir: relocatedCoreSrc)
        }
    }
}

task relocatedSourcesJar(type: Jar) {
    dependsOn relocateCoreSources
    classifier 'sources'
    from relocatedCoreSrc
    from "${core}/reflection.jvm/src"
}

def artifactJar = [file: file(outputJarPath), builtBy: proguard, name: archivesBaseName]

task dexMethodCount(type: DexMethodCount) {
    dependsOn(artifactJar.builtBy)
    jarFile = artifactJar.file
    ownPackages = ['kotlin.reflect']
}
check.dependsOn(dexMethodCount)

artifacts {
    mainJar artifactJar
    archives artifactJar
    archives relocatedSourcesJar
    archives javadocJar
}

dist {
    from(proguard)
    from(relocatedSourcesJar)
}
